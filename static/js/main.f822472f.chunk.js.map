{"version":3,"sources":["mockAPI.js","Loader.js","Autocomplete/AutoComplete.js","App.js","Autocomplete/mockApi.js","Autocomplete/index.js","index.js"],"names":["fetchUserData","userId","namePromise","Promise","resolve","setTimeout","Error","Math","random","fetchUser","favoritePromise","fetchFavorite","name","wrapPromise","favorite","promise","result","status","suspender","then","r","e","read","suggestions","isPending","fallback","style","opacity","words","map","item","key","fetchAutoComplete","text","console","log","filter","word","toLowerCase","indexOf","charAt","toUpperCase","slice","fetchWords","initialSuggetsions","label","useState","setText","setSuggestions","deferredText","useDeferredValue","timeoutMs","useTransition","startTransition","type","value","onChange","newText","target","AutoComplete","ReactDOM","render","document","getElementById","createRoot","Loader"],"mappings":"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","file":"static/js/main.f822472f.chunk.js","sourcesContent":["export function fetchUserData(userId) {\n  let namePromise = fetchUser(userId);\n  let favoritePromise = fetchFavorite(userId);\n  return {\n    userId,\n    name: wrapPromise(namePromise),\n    favorite: wrapPromise(favoritePromise)\n  };\n}\n\n// Suspense integrations like Relay implement\n// a contract like this to integrate with React.\n// Real implementations can be significantly more complex.\n// Don't copy-paste this into your project!\nfunction wrapPromise(promise) {\n  let status = \"pending\";\n  let result;\n  let suspender = promise.then(\n    r => {\n      status = \"success\";\n      result = r;\n    },\n    e => {\n      status = \"error\";\n      result = e;\n    }\n  );\n  return {\n    read() {\n      if (status === \"pending\") {\n        throw suspender;\n      } else if (status === \"error\") {\n        throw result;\n      } else if (status === \"success\") {\n        return result;\n      }\n    }\n  };\n}\n\nexport function fetchUser(userId) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      switch (userId) {\n        case 0:\n          resolve(\"Isaac\");\n          break;\n        case 1:\n          resolve(\"Nicole\");\n          break;\n        case 2:\n          resolve(\"Marcel\");\n          break;\n        case 3:\n          resolve(\"Peter\");\n          break;\n        case 4:\n          resolve(\"Nick\");\n          break;\n        case 5:\n          resolve(\"Lindsay\");\n          break;\n        case 6:\n          resolve(\"Tommy\");\n          break;\n        case 7:\n          resolve(\"Matt\");\n          break;\n        default:\n          throw Error(\"Unknown user.\");\n      }\n    }, 2000 * Math.random());\n  });\n}\n\nexport function fetchFavorite(userId) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      switch (userId) {\n        case 0:\n          resolve(\"Vegemite\");\n          break;\n        case 1:\n          resolve(\"Sass\");\n          break;\n        case 2:\n          resolve(\"His tiny desk plant\");\n          break;\n        case 3:\n          resolve(\"Working at Sidecar\");\n          break;\n        case 4:\n          resolve(\"Folding oragami\");\n          break;\n        case 5:\n          resolve(\"React\");\n          break;\n        case 6:\n          resolve(\"Being a Taurus\");\n          break;\n        case 7:\n          resolve(\"Del Frisco's\");\n          break;\n        default:\n          throw Error(\"Unknown user.\");\n      }\n    }, 3000 * Math.random());\n  });\n}\n","import React from \"react\";\n\nexport default () => {\n  return (\n    <p>\n      <b>Loading...</b>\n    </p>\n  );\n};\n","import React, { Suspense } from \"react\";\nimport Word from \"./Word\";\n\nexport default ({ suggestions, isPending }) => {\n  return (\n    <Suspense fallback={<b>Loading words</b>}>\n      <ul\n        style={\n          isPending\n            ? {\n                opacity: \".4\"\n              }\n            : null\n        }\n      >\n        {suggestions.words.read().map(item => {\n          return <li key={item}>{item} </li>;\n        })}\n      </ul>\n    </Suspense>\n  );\n};\n","import React, {\n  useState,\n  useTransition,\n  useDeferredValue,\n  Suspense,\n  SuspenseList\n} from \"react\";\nimport { fetchUserData } from \"./mockAPI\";\nimport User from \"./User\";\nimport Loader from \"./Loader\";\n\nconst getNextId = id => {\n  return id === 7 ? 0 : id + 1;\n};\n\nconst initialUser = fetchUserData(0);\n\nexport default ({ label }) => {\n  const [startTransition, isPending] = useTransition({\n    timeoutMs: 1750\n  });\n\n  const [data, setData] = useState(initialUser);\n  const deferredData = useDeferredValue(data, {\n    timeoutMs: 1000\n  });\n\n  return (\n    <>\n      <h1>{label}</h1>\n      <button\n        disabled={isPending}\n        onClick={() => {\n          startTransition(() => {\n            const nextUserId = getNextId(data.userId);\n            setData(fetchUserData(nextUserId));\n          });\n        }}\n        // onClick={() => {\n        //   const nextUserId = getNextId(data.userId);\n        //   setData(fetchUserData(nextUserId));\n        // }}\n      >\n        Next User\n      </button>\n      {isPending ? \" Pending...\" : null}\n      <Suspense fallback={<Loader />}>\n        <SuspenseList revealOrder=\"forwards\">\n          <User data={data} />\n        </SuspenseList>\n      </Suspense>\n    </>\n  );\n};\n","//import words from \"./words.json\";\nimport words from \"./words-short.json\";\n\n// Suspense integrations like Relay implement\n// a contract like this to integrate with React.\n// Real implementations can be significantly more complex.\n// Don't copy-paste this into your project!\nfunction wrapPromise(promise) {\n  let status = \"pending\";\n  let result;\n  let suspender = promise.then(\n    r => {\n      status = \"success\";\n      result = r;\n    },\n    e => {\n      status = \"error\";\n      result = e;\n    }\n  );\n  return {\n    read() {\n      if (status === \"pending\") {\n        throw suspender;\n      } else if (status === \"error\") {\n        throw result;\n      } else if (status === \"success\") {\n        return result;\n      }\n    }\n  };\n}\n\nexport function fetchWords(text) {\n  console.log(\"fetch words\", text);\n  return new Promise(resolve =>\n    setTimeout(() => {\n      resolve(\n        words\n          .filter(word => word.toLowerCase().indexOf(text.toLowerCase()) >= 0)\n          .map(word => {\n            return word.charAt(0).toUpperCase() + word.slice(1);\n          })\n      );\n    }, 400)\n  );\n}\n\nexport function fetchAutoComplete(text) {\n  let wordsPromise = fetchWords(text);\n\n  return {\n    words: wrapPromise(wordsPromise)\n  };\n}\n","import React, {\n  useState,\n  useEffect,\n  useDeferredValue,\n  Suspense,\n  useTransition\n} from \"react\";\nimport AutoComplete from \"./AutoComplete\";\nimport { fetchAutoComplete } from \"./mockApi\";\n\nconst initialSuggetsions = fetchAutoComplete(\"\");\n\nexport default ({ label }) => {\n  const [text, setText] = useState(\"\");\n  const [suggestions, setSuggestions] = useState(initialSuggetsions);\n  const deferredText = useDeferredValue(text, {\n    timeoutMs: 1000\n  });\n\n  const [startTransition, isPending] = useTransition({\n    timeoutMs: 5000\n  });\n\n  return (\n    <Suspense fallback={<h1>Loading app</h1>}>\n      <h2>{label}</h2>\n      <input\n        type=\"text\"\n        value={text}\n        onChange={e => {\n          const newText = e.target.value;\n          setText(newText);\n          //With transition\n          startTransition(() => {\n            setSuggestions(fetchAutoComplete(newText));\n          });\n        }}\n      />\n      <p>\n        <b>Term:</b>\n        {text}\n      </p>\n      <p>\n        <b>Deferred:</b>\n        {deferredText}\n      </p>\n      <Suspense fallback={<h1>Loading results </h1>}>\n        <AutoComplete suggestions={suggestions} isPending={isPending} />\n      </Suspense>\n    </Suspense>\n  );\n};\n","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport Loader from \"./Loader\";\nimport AutoComplete from \"./Autocomplete\";\n\n// ReactDOM.render(<App label=\"Conventional\" />, document.getElementById(\"root\"));\n\n// ReactDOM.createRoot(document.getElementById(\"root--concurrent\")).render(\n//   <Suspense fallback={<Loader />}>\n//     <App label=\"Concurrent\" />\n//   </Suspense>\n// );\n\nReactDOM.render(\n  <AutoComplete label=\"Conventional\" />,\n  document.getElementById(\"root\")\n);\n\nReactDOM.createRoot(document.getElementById(\"root--concurrent\")).render(\n  <Suspense fallback={<Loader />}>\n    <AutoComplete label=\"Concurrent\" />\n  </Suspense>\n);\n"],"sourceRoot":""}